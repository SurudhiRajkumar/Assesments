1.Can we assign values to lambda variables?
2.Can we pass the arguments in the same line where lambda expression is present? 

c=lambda x,y:x+y 
print("Simple lambda",c(10,11)) 
print("assigning values directly to lambda arguments",c(x=45,y=3)) #Question 1
c=(lambda x,y:pow(x,y))(8,2)  #Question 2
print("passing arguments in same line where lambda is present",c)

Output:
Simple lambda 21                                                                                                              
assinging values directly to lambda arguments 48                                                                              
passing arguments in same line where lambda is present 64        

2.
l=[1,2,3,4,5]

d=list(map(lambda x:x+1,l)) # simple map function
print(d)

def factorial(a): #factorial function
    if a==1:
        return (a)
    else:
        return (a*factorial(a-1))

fact=list((map(factorial,l))) #using factorial inside map
print(fact))

Output:
[2, 3, 4, 5, 6]                                                                                                               
[1, 2, 6, 24, 120]                                                                                                            
                   

3.when length of 2 lists is not same will it  throw error iniaitially itself or executes and then shows error

l1=[1,2,3,4,5]
l2=[7,8,9]

mul1=list(map(lambda x,y:x*y,l1,l2))
print(mul1) # Question 3 when length of 2 lists is not same it doesn't throw error rather it executes till the length of shortest list 

l1=[1,2,3,4]
l2=[7,8,9,11,3]

mul2=list(map(lambda x,y:x*y,l1,l2))
print(mul2)

output:
[7, 16, 27]                                                                                                                   
[7, 16, 27, 44]      

4.Use inbuilt function in map

import math

l1=[16,8,9,64,144]
l2=[1,2,3,4,5]

square_root=list(map(lambda x:round(math.sqrt(x),2),l1)) # Question 4 Using inbuit function in map
print(square_root)

power_num=list(map(lambda x,y:pow(x,y),l1,l2))
print(power_num)

output:
[4.0, 2.83, 3.0, 8.0, 12.0]                                                                                                   
[16, 64, 729, 16777216, 61917364224]  

5.Use Dictionary in Map
d={"a":1,"b":2,"c":3}

def value(x):
    return d[x]+1

l=list(map(value,d))
print(l)

output:
[3, 4, 2]     

6. use If condition in map
l=[1,2,3,4]

new=list(map(lambda x: "Not % by 2" if x%2!=0 else x,l))
print(new)

output:
['Not % by 2', 2, 'Not % by 2', 4] 

7.use of map, reduce, filter, accumulate
import functools
import itertools

l=[1,2,3,4,5]

even_filter=list(filter(lambda x:x%2==0,l))
print(even_filter)

even_map=list(map(lambda x:x%2==0,l))
print(even_map)

sum_reduce=functools.reduce(lambda x,y:x+y,l)
print(sum_reduce)

sum_accumulate=list(itertools.accumulate(l,lambda x,y:x+y))
print(sum_accumulate)

output:
[2, 4]                                                                                                                        
[False, True, False, True, False]                                                                                             
15                                                                                                                            
[1, 3, 6, 10, 15]
